import VideoList from '../../src/components/VideoList.js';
import VideoListEntry from '../../src/components/VideoListEntry.js';
describe('VideoList', function () {
  // When testing a React component that renders other nested components,
  // it's a common practice to "shallow render" the component, or render
  // only a single level deep. This isolates the component from it's children
  // See more: https://facebook.github.io/react/docs/test-utils.html#shallow-rendering
  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });
  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = new ReactShallowRenderer();
    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render( /*#__PURE__*/React.createElement(VideoList, {
      videos: oneFakeVideo
    }));
    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = new ReactShallowRenderer();
    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render( /*#__PURE__*/React.createElement(VideoList, {
      videos: threeFakeVideos
    }));
    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = new ReactShallowRenderer();
    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render( /*#__PURE__*/React.createElement(VideoList, {
      videos: fiveFakeVideos
    }));
    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJWaWRlb0xpc3QiLCJWaWRlb0xpc3RFbnRyeSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJSZWFjdCIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJ0byIsImJlIiwiZmFsc2UiLCJzaGFsbG93UmVuZGVyZXIiLCJSZWFjdFNoYWxsb3dSZW5kZXJlciIsIm9uZUZha2VWaWRlbyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJzbGljZSIsInJlbmRlciIsInZpZGVvTGlzdCIsImdldFJlbmRlck91dHB1dCIsInByb3BzIiwiY2hpbGRyZW4iLCJoYXZlIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNoaWxkIiwidHlwZSIsImVxdWFsIiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsbUNBQXRCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix3Q0FBM0I7QUFFQUMsUUFBUSxDQUFDLFdBQUQsRUFBYyxZQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBRUFDLEVBQUFBLEVBQUUsQ0FBQyw0Q0FBRCxFQUErQyxZQUFXO0FBQzFEQyxJQUFBQSxNQUFNLENBQUNDLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJQLFNBQTlCLENBQUQsQ0FBTixDQUFpRFEsRUFBakQsQ0FBb0RDLEVBQXBELENBQXVEQyxLQUF2RDtBQUNELEdBRkMsQ0FBRjtBQUlBUCxFQUFBQSxFQUFFLENBQUMseURBQUQsRUFBNEQsWUFBVztBQUN2RSxRQUFJUSxlQUFlLEdBQUcsSUFBSUMsb0JBQUosRUFBdEI7QUFFQSxRQUFJQyxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkMsS0FBckIsQ0FBMkIsQ0FBQyxDQUE1QixDQUFuQjtBQUNBTCxJQUFBQSxlQUFlLENBQUNNLE1BQWhCLGVBQ0Usb0JBQUMsU0FBRDtBQUFXLE1BQUEsTUFBTSxFQUFFSjtBQUFuQixNQURGO0FBSUEsUUFBSUssU0FBUyxHQUFHUCxlQUFlLENBQUNRLGVBQWhCLEVBQWhCO0FBQ0FmLElBQUFBLE1BQU0sQ0FBQ2MsU0FBUyxDQUFDRSxLQUFWLENBQWdCQyxRQUFqQixDQUFOLENBQWlDYixFQUFqQyxDQUFvQ2MsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLElBQUFBLFNBQVMsQ0FBQ0UsS0FBVixDQUFnQkMsUUFBaEIsQ0FBeUJHLE9BQXpCLENBQWlDQyxLQUFLLElBQUlyQixNQUFNLENBQUNxQixLQUFLLENBQUNDLElBQVAsQ0FBTixDQUFtQmxCLEVBQW5CLENBQXNCbUIsS0FBdEIsQ0FBNEIxQixjQUE1QixDQUExQztBQUNELEdBWEMsQ0FBRjtBQWFBRSxFQUFBQSxFQUFFLENBQUMsOERBQUQsRUFBaUUsWUFBVztBQUM1RSxRQUFJUSxlQUFlLEdBQUcsSUFBSUMsb0JBQUosRUFBdEI7QUFFQSxRQUFJZ0IsZUFBZSxHQUFHZCxNQUFNLENBQUNDLGFBQVAsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBdEI7QUFDQUwsSUFBQUEsZUFBZSxDQUFDTSxNQUFoQixlQUNFLG9CQUFDLFNBQUQ7QUFBVyxNQUFBLE1BQU0sRUFBRVc7QUFBbkIsTUFERjtBQUlBLFFBQUlWLFNBQVMsR0FBR1AsZUFBZSxDQUFDUSxlQUFoQixFQUFoQjtBQUNBZixJQUFBQSxNQUFNLENBQUNjLFNBQVMsQ0FBQ0UsS0FBVixDQUFnQkMsUUFBakIsQ0FBTixDQUFpQ2IsRUFBakMsQ0FBb0NjLElBQXBDLENBQXlDQyxNQUF6QyxDQUFnRCxDQUFoRDtBQUNBTCxJQUFBQSxTQUFTLENBQUNFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsS0FBSyxJQUFJckIsTUFBTSxDQUFDcUIsS0FBSyxDQUFDQyxJQUFQLENBQU4sQ0FBbUJsQixFQUFuQixDQUFzQm1CLEtBQXRCLENBQTRCMUIsY0FBNUIsQ0FBMUM7QUFDRCxHQVhDLENBQUY7QUFhQUUsRUFBQUEsRUFBRSxDQUFDLDREQUFELEVBQStELFlBQVc7QUFDMUUsUUFBSVEsZUFBZSxHQUFHLElBQUlDLG9CQUFKLEVBQXRCO0FBRUEsUUFBSWlCLGNBQWMsR0FBR2YsTUFBTSxDQUFDQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXJCO0FBQ0FMLElBQUFBLGVBQWUsQ0FBQ00sTUFBaEIsZUFDRSxvQkFBQyxTQUFEO0FBQVcsTUFBQSxNQUFNLEVBQUVZO0FBQW5CLE1BREY7QUFJQSxRQUFJWCxTQUFTLEdBQUdQLGVBQWUsQ0FBQ1EsZUFBaEIsRUFBaEI7QUFDQWYsSUFBQUEsTUFBTSxDQUFDYyxTQUFTLENBQUNFLEtBQVYsQ0FBZ0JDLFFBQWpCLENBQU4sQ0FBaUNiLEVBQWpDLENBQW9DYyxJQUFwQyxDQUF5Q0MsTUFBekMsQ0FBZ0QsQ0FBaEQ7QUFDQUwsSUFBQUEsU0FBUyxDQUFDRSxLQUFWLENBQWdCQyxRQUFoQixDQUF5QkcsT0FBekIsQ0FBaUNDLEtBQUssSUFBSXJCLE1BQU0sQ0FBQ3FCLEtBQUssQ0FBQ0MsSUFBUCxDQUFOLENBQW1CbEIsRUFBbkIsQ0FBc0JtQixLQUF0QixDQUE0QjFCLGNBQTVCLENBQTFDO0FBQ0QsR0FYQyxDQUFGO0FBWUQsQ0FoRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWaWRlb0xpc3QgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvVmlkZW9MaXN0LmpzJztcbmltcG9ydCBWaWRlb0xpc3RFbnRyeSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9WaWRlb0xpc3RFbnRyeS5qcyc7XG5cbmRlc2NyaWJlKCdWaWRlb0xpc3QnLCBmdW5jdGlvbigpIHtcbiAgLy8gV2hlbiB0ZXN0aW5nIGEgUmVhY3QgY29tcG9uZW50IHRoYXQgcmVuZGVycyBvdGhlciBuZXN0ZWQgY29tcG9uZW50cyxcbiAgLy8gaXQncyBhIGNvbW1vbiBwcmFjdGljZSB0byBcInNoYWxsb3cgcmVuZGVyXCIgdGhlIGNvbXBvbmVudCwgb3IgcmVuZGVyXG4gIC8vIG9ubHkgYSBzaW5nbGUgbGV2ZWwgZGVlcC4gVGhpcyBpc29sYXRlcyB0aGUgY29tcG9uZW50IGZyb20gaXQncyBjaGlsZHJlblxuICAvLyBTZWUgbW9yZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90ZXN0LXV0aWxzLmh0bWwjc2hhbGxvdy1yZW5kZXJpbmdcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKFZpZGVvTGlzdCkpLnRvLmJlLmZhbHNlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgYFZpZGVvTGlzdEVudHJ5YCB3aGVuIGdpdmVuIG9uZSB2aWRlbycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBuZXcgUmVhY3RTaGFsbG93UmVuZGVyZXIoKTtcblxuICAgIHZhciBvbmVGYWtlVmlkZW8gPSB3aW5kb3cuZmFrZVZpZGVvRGF0YS5zbGljZSgtMSk7XG4gICAgc2hhbGxvd1JlbmRlcmVyLnJlbmRlcihcbiAgICAgIDxWaWRlb0xpc3QgdmlkZW9zPXtvbmVGYWtlVmlkZW99IC8+XG4gICAgKTtcblxuICAgIHZhciB2aWRlb0xpc3QgPSBzaGFsbG93UmVuZGVyZXIuZ2V0UmVuZGVyT3V0cHV0KCk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbikudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgdmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZXhwZWN0KGNoaWxkLnR5cGUpLnRvLmVxdWFsKFZpZGVvTGlzdEVudHJ5KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIHRocmVlIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiB0aHJlZSB2aWRlb3MnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gbmV3IFJlYWN0U2hhbGxvd1JlbmRlcmVyKCk7XG5cbiAgICB2YXIgdGhyZWVGYWtlVmlkZW9zID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTMpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17dGhyZWVGYWtlVmlkZW9zfSAvPlxuICAgICk7XG5cbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDMpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBmaXZlIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiBmaXZlIHZpZGVvcycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBuZXcgUmVhY3RTaGFsbG93UmVuZGVyZXIoKTtcblxuICAgIHZhciBmaXZlRmFrZVZpZGVvcyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC01KTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e2ZpdmVGYWtlVmlkZW9zfSAvPlxuICAgICk7XG5cbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDUpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcbn0pOyJdfQ==