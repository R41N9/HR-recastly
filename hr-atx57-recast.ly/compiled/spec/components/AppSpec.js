import App from '../../src/components/App.js';
describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;
  var app;
  beforeEach(function () {
    app = renderIntoDocument( /*#__PURE__*/React.createElement(App, null));
  });
  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });
  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });
  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });
  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;
    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3'); // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description

      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });
  xdescribe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      app = renderIntoDocument( /*#__PURE__*/React.createElement(App, null));
    });
    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwidG8iLCJiZSIsInRydWUiLCJ2aWRlb1BsYXllciIsImV4aXN0IiwidmlkZW9MaXN0IiwidmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsInhkZXNjcmliZSIsImkiLCJmYWtlVmlkZW9EYXRhIiwic25pcHBldCIsInRpdGxlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxHQUFQLE1BQWdCLDZCQUFoQjtBQUVBQyxRQUFRLENBQUMsS0FBRCxFQUFRLFlBQVc7QUFDekIsTUFBSTtBQUNGQyxJQUFBQSxRQURFO0FBRUZDLElBQUFBLGtCQUZFO0FBR0ZDLElBQUFBLGlDQUhFO0FBSUZDLElBQUFBO0FBSkUsTUFLQUMsY0FMSjtBQU9BLE1BQUlDLEdBQUo7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFDcEJELElBQUFBLEdBQUcsR0FBR0osa0JBQWtCLGVBQ3RCLG9CQUFDLEdBQUQsT0FEc0IsQ0FBeEI7QUFHRCxHQUpTLENBQVY7QUFNQU0sRUFBQUEsRUFBRSxDQUFDLHNDQUFELEVBQXlDLFlBQVc7QUFDcERDLElBQUFBLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QmIsR0FBOUIsQ0FBRCxDQUFOLENBQTJDYyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsR0FGQyxDQUFGO0FBSUFQLEVBQUFBLEVBQUUsQ0FBQyw4Q0FBRCxFQUFpRCxZQUFXO0FBQzVELFFBQUlRLFdBQVcsR0FBR2IsaUNBQWlDLENBQUNHLEdBQUQsRUFBTSxjQUFOLENBQW5EO0FBQ0FHLElBQUFBLE1BQU0sQ0FBQ08sV0FBRCxDQUFOLENBQW9CSCxFQUFwQixDQUF1QkksS0FBdkI7QUFDRCxHQUhDLENBQUY7QUFLQVQsRUFBQUEsRUFBRSxDQUFDLDRDQUFELEVBQStDLFlBQVc7QUFDMUQsUUFBSVUsU0FBUyxHQUFHZixpQ0FBaUMsQ0FBQ0csR0FBRCxFQUFNLFlBQU4sQ0FBakQ7QUFDQUcsSUFBQUEsTUFBTSxDQUFDUyxTQUFELENBQU4sQ0FBa0JMLEVBQWxCLENBQXFCSSxLQUFyQjtBQUNELEdBSEMsQ0FBRjtBQUtBVCxFQUFBQSxFQUFFLENBQUMsdUVBQUQsRUFBMEUsWUFBVztBQUNyRjtBQUNBO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QmIsR0FBOUIsQ0FBRCxDQUFOLENBQTJDYyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBRUEsUUFBSUksdUJBQXVCLEdBQUdmLGtDQUFrQyxDQUFDRSxHQUFELEVBQU0sd0JBQU4sQ0FBaEU7QUFFQWEsSUFBQUEsdUJBQXVCLENBQUNDLE9BQXhCLENBQWlDQyxlQUFELElBQXFCO0FBQ25EcEIsTUFBQUEsUUFBUSxDQUFDcUIsS0FBVCxDQUFlRCxlQUFmO0FBQ0EsVUFBSUUsTUFBTSxHQUFHcEIsaUNBQWlDLENBQUNHLEdBQUQsRUFBTSxjQUFOLENBQTlDO0FBQ0EsVUFBSWtCLFdBQVcsR0FBR0QsTUFBTSxDQUFDRSxhQUFQLENBQXFCLDBCQUFyQixDQUFsQixDQUhtRCxDQUtuRDtBQUNBOztBQUNBaEIsTUFBQUEsTUFBTSxDQUFDZSxXQUFXLENBQUNFLFNBQWIsQ0FBTixDQUE4QmIsRUFBOUIsQ0FBaUNjLEtBQWpDLENBQXVDTixlQUFlLENBQUNLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBaEJDLENBQUY7QUFrQkFFLEVBQUFBLFNBQVMsQ0FBQyx1Q0FBRCxFQUEwQyxZQUFXO0FBQzVEckIsSUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFDcEJELE1BQUFBLEdBQUcsR0FBR0osa0JBQWtCLGVBQ3RCLG9CQUFDLEdBQUQsT0FEc0IsQ0FBeEI7QUFHRCxLQUpTLENBQVY7QUFNQU0sSUFBQUEsRUFBRSxDQUFDLCtDQUFELEVBQWtELFlBQVc7QUFDN0QsVUFBSVcsdUJBQXVCLEdBQUdmLGtDQUFrQyxDQUFDRSxHQUFELEVBQU0sd0JBQU4sQ0FBaEU7QUFFQWEsTUFBQUEsdUJBQXVCLENBQUNDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JRLENBQWxCLEtBQzlCcEIsTUFBTSxDQUFDWSxlQUFlLENBQUNLLFNBQWpCLENBQU4sQ0FBa0NiLEVBQWxDLENBQXFDYyxLQUFyQyxDQUEyQ0csYUFBYSxDQUFDRCxDQUFELENBQWIsQ0FBaUJFLE9BQWpCLENBQXlCQyxLQUFwRSxDQURGO0FBR0QsS0FOQyxDQUFGO0FBUUQsR0FmUSxDQUFUO0FBZ0JELENBaEVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qcyc7XG5cbmRlc2NyaWJlKCdBcHAnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0VGVzdFV0aWxzO1xuXG4gIHZhciBhcHA7XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICA8QXBwIC8+XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb1BsYXllciBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9QbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgZXhwZWN0KHZpZGVvUGxheWVyKS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9MaXN0IGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb0xpc3QgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdCcpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyIHdoZW4gYSB2aWRlbyBlbnRyeVxcJ3MgdGl0bGUgaXMgY2xpY2tlZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoaXMgdGVzdCB3aWxsIG9ubHkgd29ya3Mgb25jZSBgQXBwYCBpcyByZWZhY3RvcmVkIGludG8gYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnRcbiAgICAvLyBiZWNhdXNlIGByZW5kZXJJbnRvRG9jdW1lbnRgIGRvZXMgbm90IHdvcmsgd2l0aCBzdGF0ZWxlc3MgY2xhc3MgY29tcG9uZW50c1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuXG4gICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUpID0+IHtcbiAgICAgIFNpbXVsYXRlLmNsaWNrKHZpZGVvRW50cnlUaXRsZSk7XG4gICAgICB2YXIgcGxheWVyID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLXBsYXllcicpO1xuICAgICAgdmFyIHBsYXllclRpdGxlID0gcGxheWVyLnF1ZXJ5U2VsZWN0b3IoJy52aWRlby1wbGF5ZXItZGV0YWlscyBoMycpO1xuXG4gICAgICAvLyBUaGlzIHRlc3QgYXNzdW1lcyB0aGF0IGlmIHlvdSBjYW4gc3VjY2Vzc2Z1bGx5IHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyJ3MgdGl0bGUsXG4gICAgICAvLyB5b3UgY2FuIGFsc28gdXBkYXRlIHRoZSB2aWRlbyBhbmQgZGVzY3JpcHRpb25cbiAgICAgIGV4cGVjdChwbGF5ZXJUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpO1xuICAgIH0pO1xuICB9KTtcblxuICB4ZGVzY3JpYmUoJ3doZW4gcmVuZGVyaW5nIGxpdmUgZGF0YSBmcm9tIFlvdVR1YmUnLCBmdW5jdGlvbigpIHtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgICA8QXBwIC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT5cbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcbiJdfQ==