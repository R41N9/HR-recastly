import searchYouTube from '../../src/lib/searchYouTube.js';
import exampleVideoData from '../../src/data/exampleVideoData.js';

var getURLSearchParams = function (url) {
  return url.split('?')[1].split('&').reduce((map, params) => {
    var [key, value] = params.split('=');
    map[key] = value;
    return map;
  }, {});
};

var hasSameShape = function (objectOne, objectTwo) {
  if (Object.keys(objectOne).length !== Object.keys(objectTwo).length) {
    return false;
  }

  for (var key in objectOne) {
    if (!key in objectTwo) {
      return false;
    }

    if (typeof objectOne[key] !== typeof objectTwo[key]) {
      return false;
    }

    if (Object.prototype.toString.call(objectOne[key]) === '[object Object]') {
      return hasSameShape(objectOne[key], objectTwo[key]);
    }
  }

  return true;
};

describe('searchYouTube', function () {
  var requests, xhr; // Sinon temporarily hijacks all outgoing AJAX requests with `useFakeXMLHttpRequest`
  // letting us synchronously inspect any request made by `searchYouTube`

  beforeEach(function () {
    requests = [];
    xhr = sinon.useFakeXMLHttpRequest();

    xhr.onCreate = function (req) {
      requests.push(req);
    };
  });
  afterEach(function () {
    if (xhr.restore) {
      xhr.restore();
    }
  });
  it('should send a GET request', function () {
    searchYouTube({}, () => {});
    expect(requests[0].method).to.equal('GET');
  });
  it('should accept `query` send it in GET request', function () {
    searchYouTube('cats', () => {});
    var params = getURLSearchParams(requests[0].url);
    expect(params.q).to.equal('cats');
  }); // Same shape means that the data should have the same keys, nested the same way as `exampleVideoData`,
  // though it will not necessarily have the same values.

  it('should GET videos with the same shape as `exampleVideoData`', function (done) {
    // We want this test to make a real AJAX request
    xhr.restore();
    searchYouTube('react', data => {
      expect(hasSameShape(data, exampleVideoData)).to.be.true;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvbGliL3NlYXJjaFlvdVR1YmVTcGVjLmpzIl0sIm5hbWVzIjpbInNlYXJjaFlvdVR1YmUiLCJleGFtcGxlVmlkZW9EYXRhIiwiZ2V0VVJMU2VhcmNoUGFyYW1zIiwidXJsIiwic3BsaXQiLCJyZWR1Y2UiLCJtYXAiLCJwYXJhbXMiLCJrZXkiLCJ2YWx1ZSIsImhhc1NhbWVTaGFwZSIsIm9iamVjdE9uZSIsIm9iamVjdFR3byIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJkZXNjcmliZSIsInJlcXVlc3RzIiwieGhyIiwiYmVmb3JlRWFjaCIsInNpbm9uIiwidXNlRmFrZVhNTEh0dHBSZXF1ZXN0Iiwib25DcmVhdGUiLCJyZXEiLCJwdXNoIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiZXhwZWN0IiwibWV0aG9kIiwidG8iLCJlcXVhbCIsInEiLCJkb25lIiwiZGF0YSIsImJlIiwidHJ1ZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsYUFBUCxNQUEwQixnQ0FBMUI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QixvQ0FBN0I7O0FBRUEsSUFBSUMsa0JBQWtCLEdBQUcsVUFBU0MsR0FBVCxFQUFjO0FBQ3JDLFNBQU9BLEdBQUcsQ0FDUEMsS0FESSxDQUNFLEdBREYsRUFDTyxDQURQLEVBRUpBLEtBRkksQ0FFRSxHQUZGLEVBR0pDLE1BSEksQ0FHRyxDQUFDQyxHQUFELEVBQU1DLE1BQU4sS0FBaUI7QUFDdkIsUUFBSSxDQUFDQyxHQUFELEVBQU1DLEtBQU4sSUFBZUYsTUFBTSxDQUFDSCxLQUFQLENBQWEsR0FBYixDQUFuQjtBQUNBRSxJQUFBQSxHQUFHLENBQUNFLEdBQUQsQ0FBSCxHQUFXQyxLQUFYO0FBQ0EsV0FBT0gsR0FBUDtBQUNELEdBUEksRUFPRixFQVBFLENBQVA7QUFRRCxDQVREOztBQVdBLElBQUlJLFlBQVksR0FBRyxVQUFTQyxTQUFULEVBQW9CQyxTQUFwQixF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cmMvbGliL3NlYXJjaFlvdVR1YmUuanMnO1xuaW1wb3J0IGV4YW1wbGVWaWRlb0RhdGEgZnJvbSAnLi4vLi4vc3JjL2RhdGEvZXhhbXBsZVZpZGVvRGF0YS5qcyc7XG5cbnZhciBnZXRVUkxTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbih1cmwpIHtcbiAgcmV0dXJuIHVybFxuICAgIC5zcGxpdCgnPycpWzFdXG4gICAgLnNwbGl0KCcmJylcbiAgICAucmVkdWNlKChtYXAsIHBhcmFtcykgPT4ge1xuICAgICAgdmFyIFtrZXksIHZhbHVlXSA9IHBhcmFtcy5zcGxpdCgnPScpO1xuICAgICAgbWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pO1xufTtcblxudmFyIGhhc1NhbWVTaGFwZSA9IGZ1bmN0aW9uKG9iamVjdE9uZSwgb2JqZWN0VHdvKSB7XG4gIGlmIChPYmplY3Qua2V5cyhvYmplY3RPbmUpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob2JqZWN0VHdvKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0T25lKSB7XG4gICAgaWYgKCFrZXkgaW4gb2JqZWN0VHdvKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmplY3RPbmVba2V5XSAhPT0gdHlwZW9mIG9iamVjdFR3b1trZXldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3RPbmVba2V5XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICByZXR1cm4gaGFzU2FtZVNoYXBlKG9iamVjdE9uZVtrZXldLCBvYmplY3RUd29ba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5kZXNjcmliZSgnc2VhcmNoWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICB2YXIgcmVxdWVzdHMsIHhocjtcblxuICAvLyBTaW5vbiB0ZW1wb3JhcmlseSBoaWphY2tzIGFsbCBvdXRnb2luZyBBSkFYIHJlcXVlc3RzIHdpdGggYHVzZUZha2VYTUxIdHRwUmVxdWVzdGBcbiAgLy8gbGV0dGluZyB1cyBzeW5jaHJvbm91c2x5IGluc3BlY3QgYW55IHJlcXVlc3QgbWFkZSBieSBgc2VhcmNoWW91VHViZWBcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIHJlcXVlc3RzID0gW107XG4gICAgeGhyID0gc2lub24udXNlRmFrZVhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9uQ3JlYXRlID0gZnVuY3Rpb24ocmVxKSB7IHJlcXVlc3RzLnB1c2gocmVxKTsgfTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGlmICh4aHIucmVzdG9yZSkge1xuICAgICAgeGhyLnJlc3RvcmUoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2VuZCBhIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2VhcmNoWW91VHViZSh7fSwgKCkgPT4ge30pO1xuXG4gICAgZXhwZWN0KHJlcXVlc3RzWzBdLm1ldGhvZCkudG8uZXF1YWwoJ0dFVCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFjY2VwdCBgcXVlcnlgIHNlbmQgaXQgaW4gR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICBzZWFyY2hZb3VUdWJlKCdjYXRzJywgKCkgPT4ge30pO1xuXG4gICAgdmFyIHBhcmFtcyA9IGdldFVSTFNlYXJjaFBhcmFtcyhyZXF1ZXN0c1swXS51cmwpO1xuICAgIGV4cGVjdChwYXJhbXMucSkudG8uZXF1YWwoJ2NhdHMnKTtcbiAgfSk7XG5cbiAgLy8gU2FtZSBzaGFwZSBtZWFucyB0aGF0IHRoZSBkYXRhIHNob3VsZCBoYXZlIHRoZSBzYW1lIGtleXMsIG5lc3RlZCB0aGUgc2FtZSB3YXkgYXMgYGV4YW1wbGVWaWRlb0RhdGFgLFxuICAvLyB0aG91Z2ggaXQgd2lsbCBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0aGUgc2FtZSB2YWx1ZXMuXG4gIGl0KCdzaG91bGQgR0VUIHZpZGVvcyB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBleGFtcGxlVmlkZW9EYXRhYCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAvLyBXZSB3YW50IHRoaXMgdGVzdCB0byBtYWtlIGEgcmVhbCBBSkFYIHJlcXVlc3RcbiAgICB4aHIucmVzdG9yZSgpO1xuXG4gICAgc2VhcmNoWW91VHViZSgncmVhY3QnLCAoZGF0YSkgPT4ge1xuICAgICAgZXhwZWN0KGhhc1NhbWVTaGFwZShkYXRhLCBleGFtcGxlVmlkZW9EYXRhKSkudG8uYmUudHJ1ZTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==